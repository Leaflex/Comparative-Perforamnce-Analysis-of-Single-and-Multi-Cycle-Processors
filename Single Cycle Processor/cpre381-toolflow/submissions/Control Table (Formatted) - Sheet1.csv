Instruction,Opcode (Binary),Funct (Binary),Control Signals,,,,,,,,,,
,,,jr [jr mux],jal [jal mux],MemtoReg,MemWrite (WE Reg),RegWrite (WE Reg),RegDst,Branch (PCSrc),SignExt [determines sign extension on 16 to 32 bit extender],j [jump],ALUSrc,ALUOp
R-TYPE,,,,,,,,,,,,,
add,"""000000""","""100000""",0,0,0 [add does NOT read from memory],0 [add does NOT write to memory],1 [add writes back to a register],1 [add uses rd as destination],0 [use PC+4 no branch],1 [does not matter but choose one because more sign extensions],0 [no jump],0 [uses register as second input,"""00001"" [uses addersubtractor output]"
addu,"""000000""","""100001""",0,0,0 [addu does NOT read from memory],0 [addu does NOT write to memory],1 [addu writes back to a register],1 [addu uses rd as destination],0 [use PC+4 no branch],1 [does not matter but choose one because more sign extensions],0 [no jump],0 [uses register as second input,"""00011"" [uses addersubtractor output]"
and,"""000000""","""100100""",0,0,0 [does NOT read from memory],0 [does NOT write to memory],1 [writes back to a register],1 [uses rd as destination],0 [use PC+4 no branch],1 [does not matter but choose one because more sign extensions],0 [no jump],0 [uses register as second input,"""00100"" [uses and of inputs]"
nor,"""000000""","""100111""",0,0,0 [does NOT read from memory],0 [does NOT write to memory],1 [writes back to a register],1 [uses rd as destination],0 [use PC+4 no branch],1 [does not matter but choose one because more sign extensions],0 [no jump],0 [uses register as second input,"""00101"" [uses nor of inputs]"
xor,"""000000""","""100110""",0,0,0 [does NOT read from memory],0 [does NOT write to memory],1 [writes back to a register],1 [uses rd as destination],0 [use PC+4 no branch],1 [does not matter but choose one because more sign extensions],0 [no jump],0 [uses register as second input,"""00110"" [uses xor of inputs]"
or,"""000000""","""100101""",0,0,0 [does NOT read from memory],0 [does NOT write to memory],1 [writes back to a register],1 [uses rd as destination],0 [use PC+4 no branch],1 [does not matter but choose one because more sign extensions],0 [no jump],0 [uses register as second input,"""00111"" [uses or of inputs]"
slt,"""000000""","""101010""",0,0,0 [does NOT read from memory],0 [does NOT write to memory],1 [writes back to a register],1 [uses rd as destination],0 [use PC+4 no branch],1 [does not matter but choose one because more sign extensions],0 [no jump],0 [uses register as second input,"""01100"" [uses less than result]"
sll,"""000000""","""000000""",0,0,0 [does NOT read from memory],0 [does NOT write to memory],1 [writes back to a register],1 [uses rd as destination],0 [use PC+4 no branch],1 [does not matter but choose one because more sign extensions],0 [no jump],0 [uses register as second input,"""01001"" [uses shifter result]"
srl,"""000000""","""000010""",0,0,0 [does NOT read from memory],0 [does NOT write to memory],1 [writes back to a register],1 [uses rd as destination],0 [use PC+4 no branch],1 [does not matter but choose one because more sign extensions],0 [no jump],0 [uses register as second input,"""01010"" [uses shifter result]"
sra,"""000000""","""000011""",0,0,0 [does NOT read from memory],0 [does NOT write to memory],1 [writes back to a register],1 [uses rd as destination],0 [use PC+4 no branch],1 [does not matter but choose one because more sign extensions],0 [no jump],0 [uses register as second input,"""01011"" [uses shifter result]"
sub,"""000000""","""100010""",0,0,0 [does NOT read from memory],0 [does NOT write to memory],1 [writes back to a register],1 [uses rd as destination],0 [use PC+4 no branch],1 [does not matter but choose one because more sign extensions],0 [no jump],0 [uses register as second input,"""00010"" [uses addersubtractor output]"
subu,"""000000""","""100011""",0,0,0 [does NOT read from memory],0 [does NOT write to memory],1 [writes back to a register],1 [uses rd as destination],0 [use PC+4 no branch],1 [does not matter but choose one because more sign extensions],0 [no jump],0 [uses register as second input,"""01000"" [uses addersubtractor output]"
jr,"""000000""","""001000""",1,0,0 [does not matter],0 [does NOT write to memory],0 [does not matter],0 [does not matter],0 [does not matter],1 [does not matter but choose one because more sign extensions],1 [jump],0 [uses register as second input,"""00000"" [no ALUOp]"
,,,,,,,,,,,,,
I-TYPE,,,,,,,,,,,,,
addi,"""001000""","""------""",0,0,0 [addi does NOT read from memory],0 [addi does NOT write to memory],1 [writes back to a register],0 [addi uses rt as destination register rather than rd],0 [use PC+4 no branch],1 [addi sign extended],0 [no jump],1 [uses immediate as second input],"""00001"" [uses addersubtractor output]"
addiu,"""001001""","""------""",0,0,0 [addiu does NOT read from memory],0 [addiu does NOT write to memory],1 [writes back to a register],0 [addiu uses rt as destination register rather than rd],0 [use PC+4 no branch],1 [addiu sign extended],0 [no jump],1 [uses immediate as second input],"""00011"" [uses addersubtractor output]"
andi,"""001100""","""------""",0,0,0 [does NOT read from memory],0 [does NOT write to memory],1 [writes back to a register],0 [uses rt as destination register rather than rd],0 [use PC+4 no branch],0 [zero extended],0 [no jump],1 [uses immediate as second input],"""00100"" [uses and of inputs]"
xori,"""001110""","""------""",0,0,0 [does NOT read from memory],0 [does NOT write to memory],1 [writes back to a register],0 [uses rt as destination register rather than rd],0 [use PC+4 no branch],0 [zero extended],0 [no jump],1 [uses immediate as second input],"""00110"" [uses xor of inputs]"
ori,"""001101""","""------""",0,0,0 [does NOT read from memory],0 [does NOT write to memory],1 [writes back to a register],0 [uses rt as destination register rather than rd],0 [use PC+4 no branch],0 [zero extended],0 [no jump],1 [uses immediate as second input],"""00111"" [uses or of inputs]"
slti,"""001010""","""------""",0,0,0 [does NOT read from memory],0 [does NOT write to memory],1 [writes back to a register],0 [uses rt as destination register rather than rd],0 [use PC+4 no branch],1 [sign extended],0 [no jump],1 [uses immediate as second input],"""01100"" [uses less than result]"
lui,"""001111""","""------""",0,0,0 [does NOT read from memory],0 [does NOT write to memory],1 [writes back to a register],0 [uses rt as destination register rather than rd],0 [use PC+4 no branch],1 [does not matter but choose one because more sign extensions],0 [no jump],1 [uses immediate as second input],"""01101"" [uses shifter result]"
,,,,,,,,,,,,,
beq,"""000100""","""------""",0,0,0 [does NOT read from memory],0 [does NOT write to memory],0 [does NOT write to a register],0 [does not matter],1 [use branch if needed],1 [does not matter but choose one because more sign extensions],0 [no jump],1 [uses immediate as second input],"""01110"" [users ZERO_OUT process]"
bne,"""000101""","""------""",0,0,0 [does NOT read from memory],0 [does NOT write to memory],0 [does NOT write to a register],0 [does not matter],1 [use branch if needed],1 [does not matter but choose one because more sign extensions],0 [no jump],1 [uses immediate as second input],"""01111"" [users ZERO_OUT process]"
bgez,"""010110""","""------""",0,0,0 [does NOT read from memory],0 [does NOT write to memory],0 [does NOT write to a register],0 [does not matter],1 [use branch if needed],1 [does not matter but choose one because more sign extensions],0 [no jump],1 [uses immediate as second input],"""10000"" [users ZERO_OUT process]"
bgtz,"""000111""","""------""",0,0,0 [does NOT read from memory],0 [does NOT write to memory],0 [does NOT write to a register],0 [does not matter],1 [use branch if needed],1 [does not matter but choose one because more sign extensions],0 [no jump],1 [uses immediate as second input],"""10001"" [users ZERO_OUT process]"
blez,"""000110""","""------""",0,0,0 [does NOT read from memory],0 [does NOT write to memory],0 [does NOT write to a register],0 [does not matter],1 [use branch if needed],1 [does not matter but choose one because more sign extensions],0 [no jump],1 [uses immediate as second input],"""10010"" [users ZERO_OUT process]"
bgezal,"""000001""","""------""",0,0,,,,,1 [use branch if needed],1 [does not matter but choose one because more sign extensions],0 [no jump],1 [uses immediate as second input],"""10011"" [users ZERO_OUT process]"
bltzal,"""010101""","""------""",0,0,,,,,1 [use branch if needed],1 [does not matter but choose one because more sign extensions],0 [no jump],1 [uses immediate as second input],"""10100"" [users ZERO_OUT process]"
,,,,,,,,,,,,,
lw,"""100011""","""------""",0,0,1 [reads from memory],0 [does NOT write to memory],1 [writes back to a register],0 [uses rt as destination register rather than rd],0 [use PC+4 no branch],1 [sign extended],0 [no jump],1 [uses immediate as second input],"""00001"" [uses addersubtractor output]"
sw,"""101011""","""------""",0,0,0 [does not matter],1 [writes to memory],0 [does NOT write to a register],0 [does not matter],0 [use PC+4 no branch],1 [sign extended],0 [no jump],1 [uses immediate as second input],"""00001"" [uses addersubtractor output]"
,,,,,,,,,,,,,
J-TYPE,,,,,,,,,,,,,
j,"""000010""","""------""",0,0,0 [does not matter],0 [does not matter],0 [does not matter],0 [does not matter],0 [does not matter],1 [does not matter but choose one because more sign extensions],1 [jump],0 [does not matter],"""000000"" [does not matter]"
jal,"""000011""","""------""", 0,1,0 [does NOT read from memory],0 [does NOT write to memory],1,0 [does not matter],0 [does not matter],1 [does not matter but choose one because more sign extensions],1 [jump],0 [does not matter],"""000000"" [does not matter]"
,,,,,,,,,,,,,
halt,"""010100""",,0,0,0 [does NOT read from memory],0 [does NOT write to memory],0 [does not matter],0 [does not matter],0 [does not matter],1 [does not matter but choose one because more sign extensions],0 [no jump],0 [does not matter],"""000000"" [does not matter]"